;; Josh's sawfish configuration
;; 

(unbind-keys window-keymap)
(define max-keymap (make-keymap))
( bind-keys max-keymap
	    "W-d" 'maximize-discard
	    "W-m" 'maximize-window-toggle
	    "W-v" 'maximize-window-vertically-toggle
	    "W-h" 'maximize-window-horizontally-toggle
	    "W-f" 'maximize-fill-window-toggle)

(define term-keymap (make-keymap))
( bind-keys term-keymap
	    "y" '( jump-or-exec "xtermMplayer" "xterm -title xtermMplayer" t ))

(define emacs-keymap (make-keymap))
( bind-keys emacs-keymap
	    "a" '( jump-or-exec "Aptitude" "xterm -title Aptitude -e 'sudo aptitude'" )
	    "o" '( system "emacsclient -e '(org-clock-out)' -e '(org-save-all-org-buffers)' &" )
	    "b" '( jump-or-exec "UC Berkeley Mail" "chromium --new-window http://bmail.berkeley.edu" t )
	    "m" '( jump-or-exec "\\*Man" "emacsclient -c -e '(call-interactively (quote man))'" t )
	    "c" '( jump-or-exec "Google Calendar" "chromium --new-window http://calendar.google.com" t ))

( bind-keys global-keymap
	    "W-S-e" emacs-keymap)


(setq grow-is-maximize nil)
( bind-keys window-keymap
	    "W-m" max-keymap
	    "W-`" 'popup-window-menu
	    "W-S-Up" 'pack-window-up
	    "W-S-Down" 'pack-window-down
	    "W-S-Left" 'pack-window-left
	    "W-S-Right" 'pack-window-right
	    "W-M-S-Up" 'move-window-up
	    "W-M-S-Down" 'move-window-down
	    "W-M-S-Left" 'move-window-left
	    "W-M-S-Right" 'move-window-right
	    "W-C-Up" 'grow-window-up
	    "W-C-Down" 'grow-window-down
	    "W-C-Left" 'grow-window-left
	    "W-C-Right" 'grow-window-right
	    "W-M-Up" 'shrink-window-up
	    "W-M-Down" 'shrink-window-down
	    "W-M-Left" 'shrink-window-left
	    "W-M-Right" 'shrink-window-right
	    "W-Prior" 'raise-window
	    "W-Next" 'lower-window
	    "W-C-Prior" 'raise-window-depth
	    "W-C-Next" 'lower-window-depth
	    "W-Button3-Move" 'resize-window-interactively
	    "W-Button1-Move" 'move-window-interactively
	    "W-Button1-Click2" 'maximize-window-toggle
	    "W-Button3-Click2" '(remove-transparency (input-focus))
	    "W-Button4-Click" '(opacity-increment (input-focus) 5)
	    "W-Button5-Click" '(opacity-increment (input-focus) -5)
	    "M-F4" 'delete-window
	    )

(require 'opacity-tools)

(define (lockscreen)
  "Lock the screen"
  ( system "i3lock -d -c 008b8b &" ))
(define-command 'lockscreen lockscreen)

( bind-keys global-keymap
  "W-c"    '( system "sawfish-config &" )
  "C-W-e"   'display-errors
  ;; "C-W-r"   'restart
  ;; "C-W-q"   'quit
  "W-TAB"   'cycle-windows
  "W-S-n"   '(next-workspace 1)
  "W-S-p"   '(previous-workspace 1)
  "W-C-TAB"   'cycle-group
  "W-t"     term-keymap
  ;; "C-TAB"   'cycle-windows-backwards
  "W-M-S-l"   '(system "~/.sawfish/scripts/fingerprint-lock.sh &")
  "W-S-l"   '(system "~/.sawfish/scripts/fingerprint-xtrlock.sh &")
  "W-M-l"   '(system "xtrlock &")
  "XF86ScreenSaver"   'lockscreen
  "W-S-m"  'popup-apps-menu
  "W-w" 'popup-window-list-menu
  ;; "C-Menu"  'popup-root-menu
  ;; "S-Menu"  'popup-apps-menu
  "W-S-x"   '( system "dmenu_run &" )
  ;; "Print"   '( system "import -border window.png &" )
  ;; "C-Print" '( system "import -window root root.png &" )
  ;; "W-F2"    `( jump-or-exec "Gnome-run-dialog" "gnome-run-dialog" t )
  ;; "W-F6"    `( jump-or-exec "Geeqie" "geeqie" nil )
  "W-e"   '( system "emacsclient -c -a '' &" t )
  "W-Home"    `( jump-or-exec "Home" "nautilus --no-desktop ~" t ) )

;; Browser keys
( bind-keys global-keymap
	    "W-r"     '( system "chromium &" )
	    "W-S-r"     '( system "chromium --incognito &" )
	    "W-f"     '( system "firefox &" )
	    "W-S-f"     '( system "firefox -private-window &" ))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Bind workspaces to keys
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-list i stop)
  (if (> i stop) '()
    (cons i (make-list (+ i 1) stop))))

(define (bind-workspace i)
  (bind-keys global-keymap
	     (concat "W-F" (number->string i))
	     (list 'select-workspace i)))

(mapc bind-workspace (make-list 1 12))

(bind-keys global-keymap
	   "W-ESC"  '(select-workspace 0))


;; Remember last workspace
(defvar last-workspace 0)

(define (josh-remember-workspace)
  (setq last-workspace current-workspace))

(add-hook 'leave-workspace-hook josh-remember-workspace)

(define (josh-pop-last-workspace)
  (select-workspace last-workspace))
  
(bind-keys global-keymap
	   "W-p" '(josh-pop-last-workspace))


(setq viewport-boundary-mode 'dynamic)
(bind-keys global-keymap
	   "W-Left"	'(move-viewport -1 0)
	   "W-Right"	'(move-viewport 1 0)
	   "W-Down"	'(move-viewport 0 1)
	   "W-Up"	'(move-viewport 0 -1))

(bind-keys global-keymap
	   "W-d"	'toggle-desktop)

;; Window Matchers

;; ( add-window-matcher '( ( WM_CLASS . "^Sawfishpager/sawfishpager$" ) )
;;        '( ( position . south-east )
;;           ( fixed-positon . t )
;;           ( never-maximize . t )
;;           ( never-iconify . t )
;;           ( frame-type . none )
;;           ( cycle-skip . t )
;;           ( window-list-skip . t )
;;           ( sticky . t )
;; 	  ( avoid . () )		;So we can maximize over this guy
;;           ( sticky-viewport . t )
;;           ( depth .  16 ) ) )

( add-window-matcher '( ( WM_CLASS . "^Emacs/emacs$" ) )
       '( ( group . Emacs ) ))


( add-window-matcher '( ( WM_CLASS . "TopLevelShell" ) )
		     '( ( group . AFNI ) ))

( add-window-matcher '( ( WM_CLASS . "^AFNI/afni$" ) )
		     '( ( group . AFNI ) ))

;; To have my top panel in place

( add-window-matcher '( ( WM_NAME . "^ceftoolbar$" ) )
       '( ( depth . -14 )
	  ( position . north-west )
	  ( opacity . 100 )
	  ( dock-type . t )
	  ( avoid . t)
	  ( ignored . t)
          ( fixed-positon . t )))

( add-window-matcher '( ( WM_NAME . "^sawfishpager$" ) )
       '( ( ignored . t)))

( add-window-matcher '( ( WM_NAME . "^stalonetray$" ) )
       '( ( depth . -16 )
	  ( opacity . 100 )) )

( add-window-matcher '( ( WM_CLASS . "^XTerm/xterm$" ) )
       '( ( place-mode . under-pointer ) ))

(require 'josh-expand)
(bind-keys global-keymap
	   "W-C-Button4-Click" '(expand-window (input-focus) 5)
	   "W-C-Button5-Click" '(expand-window (input-focus) -5)
	   "W-S-C-Button4-Click" '(expand-all 5)
	   "W-S-C-Button5-Click" '(expand-all -5))

(require 'subdivide)
(bind-keys global-keymap
	   "W-C-S-Left" 'half-window-left
	   "W-C-S-Right" 'half-window-right
	   "W-C-S-Up" 'half-window-up
	   "W-C-S-Down" 'half-window-down)

;; Some experimental tiling stuff
(define subd-keymap (make-keymap))
( bind-keys global-keymap
	    "W-a" subd-keymap)

( bind-keys subd-keymap
	    "s" '(master-wind (input-focus))
	    "W-s" '(binary-tile-master (input-focus) 20)
	    "S" '(binary-tile (viewport-windows-filtered) (calculate-workarea) t)
	    "a" '(true-move (input-focus) (subd (calculate-workarea) 'left))
	    "d" '(true-move (input-focus) (subd (calculate-workarea) 'right))
	    "w" '(true-move (input-focus) (subd (calculate-workarea) 'up))
	    "x" '(true-move (input-focus) (subd (calculate-workarea) 'down))
	    "e" '(true-move (input-focus) (subd (subd (calculate-workarea) 'right) 'up))
	    "c" '(true-move (input-focus) (subd (subd (calculate-workarea) 'right) 'down))
	    "q" '(true-move (input-focus) (subd (subd (calculate-workarea) 'left) 'up))
	    "z" '(true-move (input-focus) (subd (subd (calculate-workarea) 'left) 'down))
	    "W-a" '(true-move (input-focus) (shrink-rect (subd (calculate-workarea) 'left) 20))
	    "W-d" '(true-move (input-focus) (shrink-rect (subd (calculate-workarea) 'right) 20))
	    "W-w" '(true-move (input-focus) (shrink-rect (subd (calculate-workarea) 'up) 20))
	    "W-x" '(true-move (input-focus) (shrink-rect (subd (calculate-workarea) 'down) 20))
	    "W-e" '(true-move (input-focus) (shrink-rect (subd (subd (calculate-workarea) 'right) 'up) 20))
	    "W-c" '(true-move (input-focus) (shrink-rect (subd (subd (calculate-workarea) 'right) 'down) 20))
	    "W-q" '(true-move (input-focus) (shrink-rect (subd (subd (calculate-workarea) 'left) 'up) 20))
	    "W-z" '(true-move (input-focus) (shrink-rect (subd (subd (calculate-workarea) 'left) 'down) 20)))

(bind-keys subd-keymap
	   "t" '(toggle-opacity-viewport)
	   "W-t" '(toggle-opacity-viewport))

(require 'sawfish.wm.placement.smart)
( bind-keys subd-keymap
	    "f" '(sp-do-placement (input-focus) sp-first-fit)
	    "b" '(sp-do-placement (input-focus) sp-best-fit))

;; I keep confusing Emacs's "search" and Chromium's "save"
;; (add-window-matcher
;;  '((WM_NAME . "Chromium"))
;;  '((keymap-trans . (("C-s" "C-f")))))

(define (bind-emacs)
  "Get an Emacs window and bind it to W-3"
  (let ((w (get-window-by-class "Emacs")))
    (true-move w (shrink-rect (subd (calculate-workarea) 'left) 20))
    (set-frame-style w 'candido)
    (josh-bind-window "3" w)))

(define (initfunction)
  "Kind of like FVWM's InitFunction, only run the first time and
not during restarts."
  (if (file-exists-p "~/.sawfish/.restart_sawfish")
      (delete-file "~/.sawfish/.restart_sawfish")
    (system "~/.sawfish/scripts/initfunction-scripts.sh &")
    (make-timer (bind-emacs) 5)))

(define (startfunction)
  "Kind of like FVWM's StartFunction. Run each time Sawfish starts."
  (system "~/.sawfish/scripts/startfunction-scripts.sh &"))

(define (restartfunction)
  "Kind of like FVWM's RestartFunction. Run each time Sawfish restarts."
  (system "touch ~/.sawfish/.restart_sawfish &")
  (delete-window (get-window-by-name "ceftoolbar")))

(add-hook 'before-restart-hook restartfunction)
(add-hook 'after-initialization-hook initfunction)
(add-hook 'after-initialization-hook startfunction)

;; stalonetray -bg "black" --geometry 10x1-0+0 --grow-gravity W --icon-gravity NE --icon-size 16 --dockapp-mode simple
;; synclient VertEdgeScroll=1

;; trayer --edge top --align right --SetDockType true --SetPartialStrut true  --expand true --width 10 --transparent true --tint 0x191970 --height 14
;; (window-plist (get-window-by-class "trayer"))

;; Example Tiling configuration in Sawfish's resource file
;; (require 'sawfish.wm.tile.tile)
;; (tall-tiling 1 #:width 1.75 #:top 14 #:bottom 0 #:gap 3 #:max 5 #:right nil #:resize t)
;; (tall-tiling 2 #:width 1.75 #:top 14 #:bottom 0 #:gap 3 #:max 5 #:right nil #:resize t
;; 	     #:master (lambda (win) (not (string-match "^xterm$" (window-name win)))) )

;; (col-tiling 0 #:top 0 #:bottom 0 #:gap 3 #:cols 3 #:resize t)

(bind-keys global-keymap
	   "C-M-Right" 'tall-rotate-right
	   "C-M-Left" 'tall-rotate-left
	   "M-=" 'increase-max-windows
	   "M--" 'decrease-max-windows
	   "W-t" 'next-tiling)

(bind-keys global-keymap
	   "XF86MonBrightnessUp" '(system "xbacklight -inc 10% &")
	   "XF86MonBrightnessDown" '(system "xbacklight -dec 10% &"))

(bind-keys global-keymap
	   "XF86Launch1" '(system "mplayer -fs ~/video/NitoriGetDown.mp4 &"))

(setq move-lock-when-maximized nil)

(require 'sawfish.wm.ext.pager)
(add-hook 'after-initialization-hook pager t)

(require 'dictator-scratch)
(require 'test-screenshot)
(require 'record-window)
(require 'josh-window)
(require 'josh-wallpaper)
(require 'josh-music-hotkeys)
(require 'copy-paste)

;; (require 'sawfish.wm.ext.cabinet)
;; (bind-keys global-keymap "W-s" 'cabinet-switch)
;; (nconc cabinet-filter-out-for-display-list
;;        '("^dzenLEFT$" "^dzenRIGHT$" "^stalonetray" "^ConkyCPU$" "^sawfishpager$"))

(bind-keys title-keymap
	   "Button3-Click" 'popup-window-ops-menu
	   "Button1-Click2" 'iconify-window)


;; Local Variables:
;; mode:sawfish
;; End:
